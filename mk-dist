#!/usr/bin/env zsh
setopt ERR_EXIT NO_UNSET

package_private_name=ldvsoft-env
sourcedir=${0:h}

function error {
	echo 'Error:' $@ >&2
	exit 1
}

installopts=()
packages=()
user_abs_home=
while (( $# != 0 )) {
	option=$1
	if [[ $option =~ '^[^-]\.*' && ! -v option_wants_arg ]] {
		break
	}
	shift
	if [[ -v option_wants_arg ]] {
		option=$option_wants_arg=$option
		unset option_wants_arg
	}
	case $option {
		-v|--verbose)
			debug=1
			;;
		--no-verbose)
			unset debug
			;;

		--strict)
			strict=1
			;;
		--no-strict)
			unset strict
			;;

		--build-dir)
			option_wants_arg=$option
			;;
		--build-dir=*)
			param=${option#--*=}
			builddir=${param:P}
			;;
		--no-build-dir)
			unset builddir
			;;

		--no-output)
			unset dist_output
			;;
		--output)
			option_wants_arg=$option
			;;
		--output=*)
			param=${option#--*=}
			dist_output=$param
			;;

		--no-install)
			unset install
			;;
		--install)
			install=1
			;;

		--install-dir)
			option_wants_arg=$option
			;;
		--install-dir=*)
			param=${option#--*=}
			installopts+=--dest-dir=$param
			;;

		--install-mkdir)
			installopts+=--mkdir
			;;

		--location)
			option_wants_arg=$option
			;;
		--location=*)
			param=${option#--*=}
			location=$param
			;;

		--user-absolute-home)
			option_wants_arg=$option
			;;
		--user-absolute-home=*)
			param=${option#--*=}
			user_abs_home=${~param}
			;;

		--uber-package)
			unset packages
			;;
		--package)
			option_wants_arg=$option
			;;
		--package=*)
			if [[ ! -v packages ]] {
				error Cannot combine --package with --uber-package.
			}
			param=${option#--*=}
			packages+=$param
			;;

		*)
			error Unknown option $option.
	}
}

function echo-log {
	if [[ ! -v debug ]] { return }
	echo '[log]' $@ >&2
}

function warning {
	if [[ -v strict ]] {
		error $@
	} else {
		echo 'Warning:' $@ >&2
	}
}

if (( $# != 0 )) {
	error Extra options: $@.
}

if [[ ! -v location ]] {
	error Location not specified.
}

if [[ ! -v packages ]] {
	# Uber
	packages=(core)
	for f ( $sourcedir/*(/) ) {
		local package=${f:t}
		if [[ -f $sourcedir/$package/data/install/$package.zsh ]] {
			packages+=$package
		}
	}
	unset f
	echo-log Detected packages: $packages.
}

if (( $#packages == 0 )) {
	error Package to build not specified. Use --uber-package or --package.
}

if [[ $location != user-* && -n $user_abs_home ]] {
	warning --user-absolute-home option is only effective for user-… locations.
}

if [[ ! -v install && $#installopts != 0 ]] {
	warning --install-… options are only effective when --install is enabled.
}

function location_absolute {
	location_kind=absolute
	location_prefix=${1%/}
	dist_target_prefix=

	if [[ -v 2 ]] {
		location_private_stem=$package_private_name
	}
}

function location_user {
	if [[ -n $user_abs_home ]] {
		location_kind=absolute
		location_prefix=${user_abs_home}/${1%/}
		dist_target_prefix=
	} else {
		location_kind=user-home-adaptive
		location_prefix='${HOME}'/${1%/}
		dist_target_prefix='${HOME}'
	}

	if [[ -v 2 ]] {
		location_private_stem=$package_private_name
	}
}

function location_test {
	location_kind=test
	location_prefix=${${:-$sourcedir/test-install}:P}
	dist_target_prefix=$location_prefix
}

case $location {
	system-root)
		location_absolute '' +
		;;
	system-usr)
		location_absolute /usr +
		;;
	system-local)
		location_absolute /usr/local +
		;;
	system-opt)
		location_absolute /opt/$package_private_name
		;;
	user-xdg)
		error Location $param is not implemented.
		;;
	user-local)
		location_user .local +
		;;
	user-opt)
		location_user .local/opt/$package_private_name
		;;
	absolute@*)
		location_absolute ${${location#absolute@}:P}
		;;
	test-install)
		location_test
		;;
	*)
		echo Unknown location $location. >&2
		exit 1
}

location_bindir=$location_prefix/bin
location_libdir_public=$location_prefix/lib
location_libdir_private=$location_libdir_public/${location_private_stem-private}
location_execdir_public=$location_prefix/libexec
location_execdir_private=$location_execdir_public/${location_private_stem-private}
# TODO: expression support for user-xdg
location_datadir_private=$location_prefix/share${location_private_stem+/$location_private_stem}

unfunction location_absolute
unfunction location_user
unfunction location_test

if [[ -v debug ]] {
	echo-log 'Location:' $location "($location_kind)."
	echo-log '|- Prefix:           ' $location_prefix/
	echo-log '|- Distib prefix:    ' $dist_target_prefix/
	echo-log '|'
	echo-log '|- Bindir:           ' $location_bindir
	echo-log '|- Execdir (public): ' $location_execdir_public
	echo-log '|- Execdir (private):' $location_execdir_private
	echo-log '|- Libdir (public):  ' $location_libdir_public
	echo-log '|- Libdir (private): ' $location_libdir_private
	echo-log '|- Datadir (private):' $location_datadir_private
}

if [[ ! -v dist_output && ! -v builddir && ! -v install ]] {
	error Nothing to do\; request at least one: \
		$'\n\t'explicit build location via --builddir\; \
		$'\n\t'distribution output via --output\; \
		$'\n\t'immediate installation via --install.
}

echo-log Preparing build.

if [[ ! -v builddir ]] {
	builddir=${$(mktemp -d --tmpdir ldvsoft-env_mk-dist.XXXX)%/}

	TRAPZERR TRAPEXIT () {
		rm -rf $builddir
	}
} else {
	(
		setopt NULL_GLOB
		rm -rf $builddir/* $builddir/.*
	)
}

echo-log Build at $builddir.

function build-dir {
	local trg=$builddir/${1#$dist_target_prefix/}

	if [[ -d $trg ]] { return }
	if [[ -v 2 ]] {
		mkdir -p $trg
	} else {
		mkdir $trg
	}
}

function build-file {
	local src=$1
	local trg=$builddir/${2#$dist_target_prefix/}
	if [[ -v 3 ]] {
		local extended=1
	}

	if [[ ! -f $src ]] { return }
	if [[ -f $trg ]] {
		error While building file $src already found built file with same target name.
	}

	cp $src $trg
	sed -i \
		-e "s:@@BINDIR@@:$location_bindir:" \
		-e "s:@@EXECDIR_PUBLIC@@:$location_execdir_public:" \
		-e "s:@@EXECDIR_PRIVATE@@:$location_execdir_private:" \
		-e "s:@@LIBDIR_PUBLIC@@:$location_libdir_public:" \
		-e "s:@@LIBDIR_PRIVATE@@:$location_libdir_private:" \
		-e "s:@@DATADIR_PRIVATE@@:$location_datadir_private:" \
		-e "s:@@PRIVATE_NAME@@:$package_private_name:" \
		$trg
	if [[ -v extended ]] {
		sed -i \
			-e "s:@@BINDIR!DIST@@:${location_bindir#$dist_target_prefix/}:" \
			-e "s:@@EXECDIR_PUBLIC!DIST@@:${location_execdir_public#$dist_target_prefix/}:" \
			-e "s:@@EXECDIR_PRIVATE!DIST@@:${location_execdir_private#$dist_target_prefix/}:" \
			-e "s:@@LIBDIR_PUBLIC!DIST@@:${location_libdir_public#$dist_target_prefix/}:" \
			-e "s:@@LIBDIR_PRIVATE!DIST@@:${location_libdir_private#$dist_target_prefix/}:" \
			-e "s:@@DATADIR_PRIVATE!DIST@@:${location_datadir_private#$dist_target_prefix/}:" \
			-e "s:@@PACKAGES@@:${(j:, :)packages}:" \
			-e "s:@@LOCATION@@:$location:" \
			-e "s:@@LOCATION_KIND@@:$location_kind:" \
			-e "s:@@DIST_TARGET_PREFIX@@:$dist_target_prefix:" \
			$trg
	}
}

function build-fhs-dir {
	local dir=$1
	local trg=$2

	if [[ ! -d $dir ]] { return }

	build-dir $trg +

	(
		setopt NULL_GLOB
		cd $dir
		local f
		for f ( **/* ) {
			if [[ -d $f ]] {
				build-dir $trg/$f
			} elif [[ -f $f ]] {
				build-file $f $trg/$f
			}
		}
	)
}

build-file $sourcedir/dist-install install +
build-file $sourcedir/dist-README.md README.md +
for p ( $packages ) {
	build-fhs-dir $sourcedir/$p/bin          $location_bindir
	build-fhs-dir $sourcedir/$p/exec-private $location_execdir_private
	build-fhs-dir $sourcedir/$p/lib-private  $location_libdir_private
	build-fhs-dir $sourcedir/$p/data         $location_datadir_private
	# TODO other dirs
}

unfunction build-dir
unfunction build-file
unfunction build-fhs-dir

if [[ -v debug ]] (
	cd $builddir
	tree -a
)

if [[ -v dist_output ]] {
	tar --create --auto-compress -f $dist_output -C $builddir .
	echo Created distribution archive $dist_output.
}

if [[ ! -v install ]] {
	exit
}

echo-log Executing install.

$builddir/install $installopts

echo Installation done.
